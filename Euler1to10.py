import math;

class Stack:
     #from: http://interactivepython.org/runestone/static/pythonds/BasicDS/stacks.html
    
     def __init__(self):
         self.items = []

     def isEmpty(self):
         return self.items == []

     def push(self, item):
         self.items.append(item)

     def pop(self):
         return self.items.pop()

     def peek(self):
         return self.items[len(self.items)-1]

     def size(self):
         return len(self.items)


def Euler1(m):
    #If we list all the natural numbers below 10 that are multiples of 3 or 5,
    # we get 3, 5, 6 and 9. The sum of these multiples is 23.
    #Find the sum of all the multiples of 3 or 5 below 1000.
    sumTotal = 0;
    counter = 0;
    while (counter < m):
        if (counter%3 ==0 or counter%5 == 0):
            sumTotal += counter;

        counter+=1;

    print sumTotal;


def Euler2(m):
    #Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    #By starting with 1 and 2, the first 10 terms will be:
    #1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    #By considering the terms in the Fibonacci sequence whose values do not exceed
    #four million, find the sum of the even-valued terms.
    #Personal challenge: Solve using material learned during Data Structures (CS102)

    fibStack = Stack()
    evenFibStack = Stack()
    fibStack.push(1);
    fibStack.push(2);
    evenFibSum = 0;
    while(fibStack.peek() < m):
        larger = fibStack.pop();
        if (larger%2 ==0):
            evenFibStack.push(larger);
        smaller = fibStack.pop();
        fibStack.push(larger);
        fibStack.push(larger+smaller);

    while(evenFibStack.size() > 0):
        temp = evenFibStack.pop();
        if temp%2 ==0:
            evenFibSum+=temp;
            print temp," ";
            
    print "Answer: ",evenFibSum;
    

    

    

    
